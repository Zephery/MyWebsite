import{_ as s,c as a,d as t,o as e}from"./app-DtAVAFTf.js";const n={};function h(l,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="主流gc收集器采用的算法" tabindex="-1"><a class="header-anchor" href="#主流gc收集器采用的算法"><span>主流GC收集器采用的算法</span></a></h1><table><thead><tr><th>垃圾回收器</th><th>采用的GC算法</th><th>代次</th></tr></thead><tbody><tr><td>Serial</td><td>复制</td><td>新生代</td></tr><tr><td>Parallel</td><td>复制</td><td>新生代</td></tr><tr><td>ParNew</td><td>复制</td><td>新生代</td></tr><tr><td>CMS (Concurrent Mark-Sweep)</td><td>标记-清除</td><td>老年代</td></tr><tr><td>G1 (Garbage-First)</td><td>标记-整理</td><td>老年代</td></tr><tr><td>ZGC (Z Garbage Collector)</td><td>标记-整理</td><td>老年代</td></tr><tr><td>Shenandoah</td><td>标记-复制（独立的全局复制阶段）</td><td>老年代</td></tr></tbody></table><p>上述表格展示了一些主流垃圾回收器所采用的GC算法。值得注意的是，一些回收器可能会组合使用不同的算法，或者在特定阶段采用特定的算法，以优化性能和内存利用。这种选择通常取决于应用程序的特性和性能需求。</p><h2 id="是否可以使用两种或多种垃圾回收器" tabindex="-1"><a class="header-anchor" href="#是否可以使用两种或多种垃圾回收器"><span>是否可以使用两种或多种垃圾回收器</span></a></h2><p>在Java中，你不能同时使用两种不同的垃圾回收器。Serial和G1是两种不同的垃圾回收器，它们有不同的设计目标和使用场景。</p><p>Serial垃圾回收器是一个单线程的垃圾回收器，它在进行垃圾回收时会暂停所有的应用线程。这种垃圾回收器适合于单核处理器或者内存较小的系统。</p><p>G1垃圾回收器是一种并行和并发的垃圾回收器，它可以处理大量的堆内存并且尽量减少垃圾回收引起的暂停时间。G1垃圾回收器适合于多核处理器和内存较大的系统。</p><p>如果你想在你的应用中使用某种垃圾回收器，你可以通过JVM的命令行选项来指定，例如&quot;-XX:+UseSerialGC&quot;可以启用Serial垃圾回收器，&quot;-XX:+UseG1GC&quot;可以启用G1垃圾回收器。但是你不能同时启用两种垃圾回收器。</p><h2 id="查看java进程用的是哪种垃圾回收器" tabindex="-1"><a class="header-anchor" href="#查看java进程用的是哪种垃圾回收器"><span>查看java进程用的是哪种垃圾回收器</span></a></h2><p>首先，你需要找到你的Java进程的进程ID。你可以使用jps命令来列出所有的Java进程和它们的进程ID。</p><p>然后，你可以使用jinfo -flags 进程ID命令来查看Java进程的JVM标志。在输出的信息中，你可以找到-XX:+UseXXXGC这样的标志，这个标志表示Java进程使用的垃圾回收器。例如，如果你看到-XX:+UseG1GC，那么这个Java进程就是使用G1垃圾回收器。<br> 样例：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@xxxx-1-b68d78f6d-b9nnq /data/logs]# jinfo -flags 4868</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">VM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Flags:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:CICompilerCount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:ConcGCThreads=1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:G1ConcRefinementThreads=2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:G1HeapRegionSize=1048576</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:GCDrainStackTargetSize=64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:InitialHeapSize=2147483648</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MarkStackSize=4194304</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxHeapSize=2147483648</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MaxNewSize=1287651328</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:MinHeapDeltaBytes=1048576</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:NonNMethodCodeHeapSize=5826188</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:NonProfiledCodeHeapSize=122916026</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:ProfiledCodeHeapSize=122916026</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:ReservedCodeCacheSize=251658240</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+SegmentedCodeCache</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseCompressedClassPointers</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseCompressedOops</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseFastUnorderedTimeStamps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+UseG1GC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="怎么查看java进程eden、survivor等各个区的内存占用" tabindex="-1"><a class="header-anchor" href="#怎么查看java进程eden、survivor等各个区的内存占用"><span>怎么查看java进程eden、survivor等各个区的内存占用</span></a></h2><p>用jstat -gc 进程ID命令来查看Java进程的堆内存使用情况。这个命令会显示一些列的数据，包括：</p><p>S0C、S1C、S0U、S1U：Survivor 0和Survivor 1区的当前容量（Capacity）和使用量（Used）。<br> EC、EU：Eden区的当前容量和使用量。<br> OC、OU：Old区的当前容量和使用量。<br> MC、MU：元数据区的当前容量和使用量。<br> CCSC、CCSU：压缩类空间的当前容量和使用量。<br> 这些数据都是以KB为单位的。你可以通过这些数据来了解Java进程的堆内存使用情况。<br> 样例：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@xxxx-1-b68d78f6d-b9nnq /data/logs]# jstat -gc  4868</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> S0C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S0U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      EC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       EU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        OC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         OU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       MC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     MU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CCSC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   CCSU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   YGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     YGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     GCT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   5120.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   5120.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1315840.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 871424.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  776192.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   300002.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  123212.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 117919.3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 14464.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12606.6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  68825</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1274.741</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0.000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  46</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0.664</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1275.405</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考：</span></a></h2><p>1.<a href="https://space.bilibili.com/478364560/article" target="_blank" rel="noopener noreferrer">儒猿课堂</a></p>`,18)]))}const r=s(n,[["render",h],["__file","常用GC回收器.html.vue"]]),p=JSON.parse('{"path":"/java/JVM/%E5%B8%B8%E7%94%A8GC%E5%9B%9E%E6%94%B6%E5%99%A8.html","title":"主流GC收集器采用的算法","lang":"zh-CN","frontmatter":{"description":"主流GC收集器采用的算法 上述表格展示了一些主流垃圾回收器所采用的GC算法。值得注意的是，一些回收器可能会组合使用不同的算法，或者在特定阶段采用特定的算法，以优化性能和内存利用。这种选择通常取决于应用程序的特性和性能需求。 是否可以使用两种或多种垃圾回收器 在Java中，你不能同时使用两种不同的垃圾回收器。Serial和G1是两种不同的垃圾回收器，它们...","head":[["meta",{"property":"og:url","content":"http://www.wenzhihuai.com/java/JVM/%E5%B8%B8%E7%94%A8GC%E5%9B%9E%E6%94%B6%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"主流GC收集器采用的算法"}],["meta",{"property":"og:description","content":"主流GC收集器采用的算法 上述表格展示了一些主流垃圾回收器所采用的GC算法。值得注意的是，一些回收器可能会组合使用不同的算法，或者在特定阶段采用特定的算法，以优化性能和内存利用。这种选择通常取决于应用程序的特性和性能需求。 是否可以使用两种或多种垃圾回收器 在Java中，你不能同时使用两种不同的垃圾回收器。Serial和G1是两种不同的垃圾回收器，它们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-16T11:46:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-16T11:46:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"主流GC收集器采用的算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-16T11:46:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zephery\\",\\"url\\":\\"https://wenzhihuai.com/article/\\"}]}"]]},"headers":[{"level":2,"title":"是否可以使用两种或多种垃圾回收器","slug":"是否可以使用两种或多种垃圾回收器","link":"#是否可以使用两种或多种垃圾回收器","children":[]},{"level":2,"title":"查看java进程用的是哪种垃圾回收器","slug":"查看java进程用的是哪种垃圾回收器","link":"#查看java进程用的是哪种垃圾回收器","children":[]},{"level":2,"title":"怎么查看java进程eden、survivor等各个区的内存占用","slug":"怎么查看java进程eden、survivor等各个区的内存占用","link":"#怎么查看java进程eden、survivor等各个区的内存占用","children":[]},{"level":2,"title":"参考：","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708077309000,"updatedTime":1708083988000,"contributors":[{"name":"zhihuaiwen","email":"zhihuaiwen@tencent.com","commits":2}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"java/JVM/常用GC回收器.md","localizedDate":"2024年2月16日","excerpt":"\\n<table>\\n<thead>\\n<tr>\\n<th>垃圾回收器</th>\\n<th>采用的GC算法</th>\\n<th>代次</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Serial</td>\\n<td>复制</td>\\n<td>新生代</td>\\n</tr>\\n<tr>\\n<td>Parallel</td>\\n<td>复制</td>\\n<td>新生代</td>\\n</tr>\\n<tr>\\n<td>ParNew</td>\\n<td>复制</td>\\n<td>新生代</td>\\n</tr>\\n<tr>\\n<td>CMS (Concurrent Mark-Sweep)</td>\\n<td>标记-清除</td>\\n<td>老年代</td>\\n</tr>\\n<tr>\\n<td>G1 (Garbage-First)</td>\\n<td>标记-整理</td>\\n<td>老年代</td>\\n</tr>\\n<tr>\\n<td>ZGC (Z Garbage Collector)</td>\\n<td>标记-整理</td>\\n<td>老年代</td>\\n</tr>\\n<tr>\\n<td>Shenandoah</td>\\n<td>标记-复制（独立的全局复制阶段）</td>\\n<td>老年代</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,p as data};
