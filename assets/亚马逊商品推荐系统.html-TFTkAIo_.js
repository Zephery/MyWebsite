import{_ as s,c as a,d as e,o as n}from"./app-DtAVAFTf.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="商品推荐系统" tabindex="-1"><a class="header-anchor" href="#商品推荐系统"><span>商品推荐系统</span></a></h1><p>推荐系统首先收集用户的历史行为数据,然后通过预处理的方法得到用户-评价矩阵,再利用机器学习领域中相关推荐技术形成对用户的个性化推荐。有的推荐系统还搜集用户对推荐结果的反馈,并根据实际的反馈信息实时调整推荐策略,产生更符合用户需求的推荐结果。为了更好的去了解一个推荐系统，从0到1了解推荐过程，我们通过一些网上开源的数据来搭建一个推荐系统</p><hr><h2 id="一、整体目标" tabindex="-1"><a class="header-anchor" href="#一、整体目标"><span>一、整体目标</span></a></h2><p>搭建推荐系统的第一步是明确目标和需求：</p><ol><li><strong>业务目标</strong>：为用户提供个性化的商品推荐，提高商品曝光率和购买转化率。</li><li><strong>推荐类型</strong>： <ul><li><strong>个性化推荐</strong>：根据用户的历史行为推荐商品。</li><li><strong>热门推荐</strong>：根据商品流行趋势推荐高销量或高评价的商品。</li><li><strong>相似商品推荐</strong>：推荐与用户浏览或购买的商品类似的商品。</li></ul></li><li><strong>用户需求</strong>：分析用户的行为数据，包括浏览、点击、购买、搜索等操作。</li><li><strong>架构设计需求</strong>：使用前后端分离的架构，前端使用 Vue.js 提供页面交互，后端采用 Python 开发 API 并执行推荐逻辑。</li></ol><hr><h2 id="二、数据准备" tabindex="-1"><a class="header-anchor" href="#二、数据准备"><span>二、数据准备</span></a></h2><h3 id="_1-数据收集" tabindex="-1"><a class="header-anchor" href="#_1-数据收集"><span>1. 数据收集</span></a></h3><p>数据源选取自 Kaggle，常见的数据集包括以下几类：</p><ul><li><strong>商品数据（包含类目）</strong>：这里我们选择的是<a href="https://www.kaggle.com/datasets/asaniczka/amazon-products-dataset-2023-1-4m-products" target="_blank" rel="noopener noreferrer">amazon-products-dataset-2023-1-4m-products</a>，为什么不是淘宝或者京东商品？问就是没有</li><li><strong>评分数据</strong>：用户对商品的评分（如 1~5 分），这里用的是<a href="https://www.kaggle.com/datasets/ravirajbabasomane/amazon-reviews-2023" target="_blank" rel="noopener noreferrer">亚马逊商品评分</a>数据，淘宝京东也是没有的</li><li><strong>用户行为数据</strong>：用户点击、浏览、购买、评分、评论记录等。前期只有一张简单的自建点击表，后续看看怎么扩展吧。</li></ul><p>db使用的是sqlite3，搜索东西均为了轻量化，数据获取如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> kagglehub.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dataset_download</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;asaniczka/amazon-products-dataset-2023-1-4m-products&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Path to dataset files:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, path)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 查找 CSV 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    data_file </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> root, dirs, files </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">walk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> files:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">endswith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.csv&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                data_file </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(root, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                break</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 连接 SQLite 数据库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    conn </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sqlite3.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;db/recommend.db&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户id当前为了轻量化，我们直接使用用户的ip做为user_id，建表如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- auto-generated definition</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> user_clicks</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user_id    </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    asin       </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    click_time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据清洗与预处理" tabindex="-1"><a class="header-anchor" href="#_2-数据清洗与预处理"><span>2. 数据清洗与预处理</span></a></h3><p>处理原始数据可能出现的问题：</p><ul><li><strong>异常值处理</strong>：过滤异常数据，如重复记录或评分异常。</li><li><strong>缺失值填充</strong>：对商品描述等缺失信息填充默认值（如 &quot;无描述&quot;）。</li><li><strong>格式转换</strong>：将数据转换为推荐算法的输入格式，例如生成用户-商品评分矩阵。</li></ul><p>对于商品文本信息（如商品描述和标题），可以使用词频统计（TF-IDF）提取关键词。</p><h3 id="_3-数据存储与分割" tabindex="-1"><a class="header-anchor" href="#_3-数据存储与分割"><span>3. 数据存储与分割</span></a></h3><p>将清洗后的数据存入数据库（如 MySQL），并按时间或用户分割为训练集和测试集：</p><ul><li><strong>训练集</strong>：用于训练模型，通常使用历史数据。</li><li><strong>测试集</strong>：用于验证模型性能和推荐结果质量。</li></ul><hr><h2 id="三、后端设计与推荐算法开发" tabindex="-1"><a class="header-anchor" href="#三、后端设计与推荐算法开发"><span>三、后端设计与推荐算法开发</span></a></h2><figure><img src="https://github-images.wenzhihuai.com/images/image-20250420162331865.png" alt="推荐过程" tabindex="0" loading="lazy"><figcaption>推荐过程</figcaption></figure><p>后端使用的flask框架，对每一个请求都执行召回、粗排、精排、重排等，最终展示到用户。</p><h3 id="_1-推荐算法设计" tabindex="-1"><a class="header-anchor" href="#_1-推荐算法设计"><span>1. 推荐算法设计</span></a></h3><p>根据业务需求选择以下推荐方法：</p><ul><li><p><strong>基于协同过滤的推荐</strong>：</p><ul><li>用户协同过滤：分析行为相似的用户并推荐他们关注的商品。</li><li>商品协同过滤：按商品之间的相似性推荐，比如推荐与当前商品类似的商品。</li></ul></li><li><p><strong>基于内容的推荐</strong>：<br> 按商品属性（如标题或类别）进行推荐。使用 TF-IDF 方法提取文本特征，并基于余弦相似性计算商品之间的相似性。</p></li><li><p><strong>基于深度学习的推荐</strong>：<br> 使用深度学习方法，如神经协同过滤或序列模型。该方式能够捕捉复杂的用户行为和兴趣变化。</p></li></ul><h3 id="_2-推荐服务开发" tabindex="-1"><a class="header-anchor" href="#_2-推荐服务开发"><span>2. 推荐服务开发</span></a></h3><p>后端推荐服务应该支持以下功能：</p><ul><li>热门商品推荐：基于销量、评价等指标推荐热门商品。</li><li>个性化推荐：根据用户历史行为生成专属推荐列表。</li><li>相似商品推荐：基于商品相似性推荐相关产品。</li></ul><p>下面是由GPT生成的代码，只展示部分，感兴趣的可以直接去看下源码：<a href="https://github.com/Zephery/amazon-rec" target="_blank" rel="noopener noreferrer">https://github.com/Zephery/amazon-rec</a></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">candidates </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> recall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">coarse_ranked </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> coarse_ranking</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(candidates)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fine_ranked </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fine_ranking</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_id, coarse_ranked)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">final_recommendations </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> re_ranking</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_id, fine_ranked)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、前端设计与展示" tabindex="-1"><a class="header-anchor" href="#四、前端设计与展示"><span>四、前端设计与展示</span></a></h2><p>前端采用 Vue.js 构建交互页面，在推荐系统中展示推荐结果。</p><h3 id="_1-前端页面结构" tabindex="-1"><a class="header-anchor" href="#_1-前端页面结构"><span>1. 前端页面结构</span></a></h3><p>前端主要实现以下功能：</p><ul><li><strong>首页推荐</strong>：展示热门商品。</li><li><strong>个性化推荐</strong>：为用户提供专属推荐内容。</li><li><strong>商品详情页</strong>：展示与当前商品关联的推荐商品。</li></ul><h3 id="_2-与后端的接口调用" tabindex="-1"><a class="header-anchor" href="#_2-与后端的接口调用"><span>2. 与后端的接口调用</span></a></h3><p>前端与后端通过 API 完成数据交互，获取以下推荐结果：</p><ul><li>热门商品列表。</li><li>个性化推荐结果。</li><li>商品关联推荐内容。</li></ul><h3 id="_3-数据展示方式" tabindex="-1"><a class="header-anchor" href="#_3-数据展示方式"><span>3. 数据展示方式</span></a></h3><p>推荐结果展示在动态页面中，用户可以点击查看商品详情或加入购物车。</p><h3 id="_4-成果" tabindex="-1"><a class="header-anchor" href="#_4-成果"><span>4. 成果</span></a></h3><p>体验直达：<a href="https://rec.wenzhihuai.com/products" target="_blank" rel="noopener noreferrer">https://rec.wenzhihuai.com/products</a>，因服务需要加载大量数据，可能有时候无法访问。</p><p><strong>主商品界面</strong></p><p>清理浏览记录可把自己的点击日志给清空，可以重新点击别的来体验一下推荐效果。</p><figure><img src="https://github-images.wenzhihuai.com/images/image-20250420160434888.png" alt="首页" tabindex="0" loading="lazy"><figcaption>首页</figcaption></figure><p><strong>商品详情页</strong></p><figure><img src="https://github-images.wenzhihuai.com/images/image-20250420160508717.png" alt="商品详情页" tabindex="0" loading="lazy"><figcaption>商品详情页</figcaption></figure><hr><h2 id="五、下一步的优化" tabindex="-1"><a class="header-anchor" href="#五、下一步的优化"><span>五、下一步的优化</span></a></h2><p>太多了，这个版本只是个草稿，甚至说是半残品，本人技术有限，大部分也只能看看GPT生成的一些代码，调优还在持续进行中。<br> 1.搜索无法精准找到想要的内容，比如搜索&quot;ipad&quot;，出来的却是一大堆ipad相关的配件，这个还在优化中<br> 2.点击单个商品后，再次返回，所推荐的商品相关性太差<br> 3.需要由推荐系统转变为广告系统，增加投放、计费等能力。<br> 慢慢来吧</p><p>访问地址：<a href="https://rec.wenzhihuai.com/products" target="_blank" rel="noopener noreferrer">https://rec.wenzhihuai.com/products</a><br> 源码：<a href="https://github.com/Zephery/amazon-rec" target="_blank" rel="noopener noreferrer">https://github.com/Zephery/amazon-rec</a></p>`,56)]))}const p=s(l,[["render",t],["__file","亚马逊商品推荐系统.html.vue"]]),d=JSON.parse('{"path":"/system-design/%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.html","title":"商品推荐系统","lang":"zh-CN","frontmatter":{"description":"商品推荐系统 推荐系统首先收集用户的历史行为数据,然后通过预处理的方法得到用户-评价矩阵,再利用机器学习领域中相关推荐技术形成对用户的个性化推荐。有的推荐系统还搜集用户对推荐结果的反馈,并根据实际的反馈信息实时调整推荐策略,产生更符合用户需求的推荐结果。为了更好的去了解一个推荐系统，从0到1了解推荐过程，我们通过一些网上开源的数据来搭建一个推荐系统 一...","head":[["meta",{"property":"og:url","content":"http://www.wenzhihuai.com/system-design/%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%BE/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"商品推荐系统"}],["meta",{"property":"og:description","content":"商品推荐系统 推荐系统首先收集用户的历史行为数据,然后通过预处理的方法得到用户-评价矩阵,再利用机器学习领域中相关推荐技术形成对用户的个性化推荐。有的推荐系统还搜集用户对推荐结果的反馈,并根据实际的反馈信息实时调整推荐策略,产生更符合用户需求的推荐结果。为了更好的去了解一个推荐系统，从0到1了解推荐过程，我们通过一些网上开源的数据来搭建一个推荐系统 一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github-images.wenzhihuai.com/images/image-20250420162331865.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-02T08:15:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-02T08:15:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"商品推荐系统\\",\\"image\\":[\\"https://github-images.wenzhihuai.com/images/image-20250420162331865.png\\",\\"https://github-images.wenzhihuai.com/images/image-20250420160434888.png\\",\\"https://github-images.wenzhihuai.com/images/image-20250420160508717.png\\"],\\"dateModified\\":\\"2025-06-02T08:15:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zephery\\",\\"url\\":\\"https://wenzhihuai.com/article/\\"}]}"]]},"headers":[{"level":2,"title":"一、整体目标","slug":"一、整体目标","link":"#一、整体目标","children":[]},{"level":2,"title":"二、数据准备","slug":"二、数据准备","link":"#二、数据准备","children":[{"level":3,"title":"1. 数据收集","slug":"_1-数据收集","link":"#_1-数据收集","children":[]},{"level":3,"title":"2. 数据清洗与预处理","slug":"_2-数据清洗与预处理","link":"#_2-数据清洗与预处理","children":[]},{"level":3,"title":"3. 数据存储与分割","slug":"_3-数据存储与分割","link":"#_3-数据存储与分割","children":[]}]},{"level":2,"title":"三、后端设计与推荐算法开发","slug":"三、后端设计与推荐算法开发","link":"#三、后端设计与推荐算法开发","children":[{"level":3,"title":"1. 推荐算法设计","slug":"_1-推荐算法设计","link":"#_1-推荐算法设计","children":[]},{"level":3,"title":"2. 推荐服务开发","slug":"_2-推荐服务开发","link":"#_2-推荐服务开发","children":[]}]},{"level":2,"title":"四、前端设计与展示","slug":"四、前端设计与展示","link":"#四、前端设计与展示","children":[{"level":3,"title":"1. 前端页面结构","slug":"_1-前端页面结构","link":"#_1-前端页面结构","children":[]},{"level":3,"title":"2. 与后端的接口调用","slug":"_2-与后端的接口调用","link":"#_2-与后端的接口调用","children":[]},{"level":3,"title":"3. 数据展示方式","slug":"_3-数据展示方式","link":"#_3-数据展示方式","children":[]},{"level":3,"title":"4. 成果","slug":"_4-成果","link":"#_4-成果","children":[]}]},{"level":2,"title":"五、下一步的优化","slug":"五、下一步的优化","link":"#五、下一步的优化","children":[]}],"git":{"createdTime":1745140136000,"updatedTime":1748852107000,"contributors":[{"name":"zhihuaiwen","email":"1570631036@qq.com","commits":2}]},"readingTime":{"minutes":5.47,"words":1640},"filePathRelative":"system-design/系统建设/亚马逊商品推荐系统.md","localizedDate":"2025年4月20日","excerpt":"\\n<p>推荐系统首先收集用户的历史行为数据,然后通过预处理的方法得到用户-评价矩阵,再利用机器学习领域中相关推荐技术形成对用户的个性化推荐。有的推荐系统还搜集用户对推荐结果的反馈,并根据实际的反馈信息实时调整推荐策略,产生更符合用户需求的推荐结果。为了更好的去了解一个推荐系统，从0到1了解推荐过程，我们通过一些网上开源的数据来搭建一个推荐系统</p>","autoDesc":true}');export{p as comp,d as data};
